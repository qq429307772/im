<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="root.mapper.GroupUsersMapper" >
  <resultMap id="BaseResultMap" type="root.model.GroupUsers" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="group_id" property="groupId" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  
   <resultMap id="memberUserMap" type="root.model.Users" >
    <id column="userId" property="id" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="faceImageCut" property="faceImageCut" jdbcType="VARCHAR" />
    <result column="qqNumber" property="qqNumber" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="groupMap" type="root.model.Groups" >
    <id column="groupId" property="id" jdbcType="VARCHAR" />
    <result column="group_number" property="groupNumber" jdbcType="VARCHAR" />
    <result column="group_faceImage_big" property="groupFaceimageBig" jdbcType="VARCHAR" />
    <result column="group_name" property="groupName" jdbcType="VARCHAR" />
    <result column="group_description" property="groupDescription" jdbcType="VARCHAR" />
    <result column="qrCode" property="qrcode" jdbcType="VARCHAR" />
    <result column="users_num" property="usersNum" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, group_id, user_id, create_time
  </sql>
  
  <select id="groupListByUserId" parameterType="map" resultMap="groupMap">
    select g.id groupId, g.group_faceImage_big group_faceImage_big, g.group_name group_name,
    g.group_number group_number,g.users_num users_num
    from group_users gu
    LEFT JOIN `groups` g ON g.id = gu.group_id
    where user_id = #{userId}
  </select>
  
   <select id="memberListByGroupId" parameterType="map" resultMap="memberUserMap">
    select u.id userId, u.nickname nickname, u.face_image_cut faceImageCut,u.qq_number qqNumber
    from group_users gu
    LEFT JOIN users u ON u.id = gu.user_id
    where group_id = #{groupId}
  </select>
  
  
   <select id="findGroupMemberInfo" parameterType="map" resultMap="memberUserMap">
    select u.id userId, u.nickname nickname, u.face_image_cut faceImageCut,u.qq_number qqNumber
    from group_users gu
    LEFT JOIN users u ON u.id = gu.user_id
    where group_id = #{groupId}
    LIMIT 0,6
  </select>
  
   <select id="isJoined" parameterType="map" resultType="int">
    select count(1)
    from group_users
    where group_id = #{groupId} AND user_id = #{userId}
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from group_users
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from group_users
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="root.model.GroupUsers" >
    insert into group_users (id, group_id, user_id, 
      create_time)
    values (#{id,jdbcType=VARCHAR}, #{groupId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="root.model.GroupUsers" >
    insert into group_users
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="groupId != null" >
        group_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="groupId != null" >
        #{groupId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="root.model.GroupUsers" >
    update group_users
    <set >
      <if test="groupId != null" >
        group_id = #{groupId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="root.model.GroupUsers" >
    update group_users
    set group_id = #{groupId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>